abstract class Option[out T]: (Some[T] | None)
class Some[out T](value: T) extends Option[T]
module None extends Option[nothing]

abstract class List[out T]: (Cons[T] | Nil)
class Cons[out T](val head: T, val tail: List[T]) extends List[T]
module Nil extends List[nothing]
fun (::) cons(head, tail) = Cons(head, tail)

fun findFirst(p, xs) = if xs is
  Nil then None
  Cons(x, xs') and
    p(x) then Some(x)
    else findFirst(p, xs')

// An unordered list of integers.
let xs = 6 :: 2 :: 4 :: 1 :: 3 :: 5 :: 0 :: 9 :: Nil

findFirst(x => x > 8, xs)
findFirst(x => x > 42, xs)

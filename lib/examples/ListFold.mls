fun (|>) pipe(x, f) = f(x)
fun (++) strcat(s1, s2) = concat(s1)(s2)

abstract class List[out T]: (Cons[T] | Nil)
class Cons[out T](val head: T, val tail: List[T]) extends List[T]
module Nil extends List[nothing]

fun (::) cons(head, tail) = Cons(head, tail)

let oneTwoThree = 1 :: 2 :: 3 :: Nil

// Note that JavaScript doesn't have tail call optimization. Therefore, this
// implementation is still inefficient in practice.
fun listJoin(sep) =
  let rec aux(acc, xs) =
    if xs is
      Nil then acc
      Cons(x, xs') then aux(acc ++ sep ++ toString(x), xs')
  (xs) =>
    if xs is
      Cons(x, xs') then aux(toString(x), xs')
      Nil then ""

listJoin(", ")(1 :: 2 :: 3 :: Nil)
(1 :: 2 :: 3 :: Nil) |> listJoin(", ")

fun showList(xs) = "[" ++ listJoin(", ")(xs) ++ "]"

fun (:::) appendAll(xs, ys) =
  if xs is
    Nil then ys
    Cons(x, xs') then x :: (xs' ::: ys)

((1 :: 2 :: 3 :: Nil) ::: (4 :: 5 :: 6 :: Nil)) |> showList

fun reverse(xs) =
  let rec aux(acc, xs) =
    if xs is
      Nil then acc
      Cons(x, xs') then aux(x :: acc, xs')
  aux(Nil, xs)

(1 :: 2 :: 3 :: Nil) |> showList
reverse(1 :: 2 :: 3 :: Nil) |> showList

//   __       _     _ _          __ _
//  / _| ___ | | __| | |    ___ / _| |_
// | |_ / _ \| |/ _` | |   / _ \ |_| __|
// |  _| (_) | | (_| | |__|  __/  _| |_
// |_|  \___/|_|\__,_|_____\___|_|  \__|
//

fun foldLeft(f)(z) =
  let rec aux(acc, xs) =
    if xs is
      Nil then acc
      Cons(x, xs') then aux(f(acc, x), xs')
  (xs) => aux(z, xs)

let sum = foldLeft((acc, x) => acc + x)(0)
sum(Nil)
sum(1 :: 2 :: 3 :: Nil)

let product = foldLeft((acc, x) => acc * x)(1)
product(Nil)
product(1 :: 2 :: 3 :: Nil)

let length = foldLeft((acc, _) => acc + 1)(0)
length(Nil)
length(1 :: 2 :: 3 :: Nil)

let reverse' = foldLeft((acc, x) => x :: acc)(Nil)
reverse'(Nil)
reverse'(1 :: 2 :: 3 :: Nil) |> showList


//   __       _     _ ____  _       _     _
//  / _| ___ | | __| |  _ \(_) __ _| |__ | |_
// | |_ / _ \| |/ _` | |_) | |/ _` | '_ \| __|
// |  _| (_) | | (_| |  _ <| | (_| | | | | |_
// |_|  \___/|_|\__,_|_| \_\_|\__, |_| |_|\__|
//                            |___/

fun foldRight(f)(z) =
  let rec aux(acc, xs) =
    if xs is
      Nil then acc
      Cons(x, xs') then f(x, aux(acc, xs'))
  (xs) => aux(z, xs)

let double = foldRight((x, acc) => x :: x :: acc)(Nil)
double(Nil) |> showList
double(1 :: 2 :: 3 :: Nil) |> showList

let flatten = foldRight((xs, acc) => xs ::: acc)(Nil)
flatten(Nil) |> showList
flatten(oneTwoThree :: oneTwoThree :: oneTwoThree :: Nil) |> showList

fun id(x) = x

fun foldLeft'(f: ('A, 'B) -> 'A)(z: 'A) =
  let g(x, y)(z) = y(f(z, x))
  (xs) => foldRight(g)(id)(xs)(z)

let minus = foldLeft'((acc, x) => acc - x)(0)
minus(Nil)
minus(1 :: 2 :: 3 :: Nil)

let reverse'' = foldLeft'((acc, x) => x :: acc)(Nil)
reverse(Nil)
reverse(1 :: 2 :: 3 :: Nil) |> showList


class Pair[A, B](first: A, second: B)

abstract class Either[out A, out B]
class Left[out A, out B](value: A) extends Either[A, B]
class Right[out A, out B](value: B) extends Either[A, B]

abstract class List[out T]: (Cons[T] | Nil)
class Cons[out T](val head: T, val tail: List[T]) extends List[T]
module Nil extends List[nothing]

fun (::) cons(head, tail) = Cons(head, tail)

fun mapPartition(f, xs) =
  if xs is
    Nil then Pair(Nil, Nil)
    Cons(x, xs) and mapPartition(f, xs) is Pair(l, r) and f(x) is
      Left(v) then Pair(Cons(v, l), r)
      Right(v) then Pair(l, Cons(v, r))

let xs = 1 :: -2 :: 3 :: -4 :: 5 :: -6 :: Nil

mapPartition((x => if x > 0 then Right(x) else Left(x)), xs)

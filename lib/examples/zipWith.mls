abstract class Option[out T]: (Some[T] | None)
class Some[out T](value: T) extends Option[T]
module None extends Option[nothing]

abstract class List[out T]: (Cons[T] | Nil)
class Cons[out T](val head: T, val tail: List[T]) extends List[T]
module Nil extends List[nothing]

fun (::) cons(head, tail) = Cons(head, tail)

fun zipWith(f, xs, ys) =
  if xs is
    Cons(x, xs) and ys is
      Cons(y, ys) and
        zipWith(f, xs, ys) is
          Some(tail) then Some(Cons(f(x, y), tail))
          None then None
      Nil then None
    Nil and ys is
      Nil then Some(Nil)
      else None

let xs = 1 :: 2 :: 3 :: Nil
let ys = 4 :: 5 :: 6 :: Nil

zipWith((x, y) => (x + y) * 2, xs, ys)
